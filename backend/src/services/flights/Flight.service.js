import { admin, db } from '../../database/firebaseAdmin.js'
import Flight from '../../models/flights/Flight.model.js'
import SeatStatus from '../../models/flights/FlightSeatStatus.model.js'
import SeatType from '../../models/flights/FlightSeatType.model.js'

// Collection: flights
// |
// |-- Document (flightId - v√≠ d·ª•: VN123-20250508)
//     |
//     |-- Tr∆∞·ªùng d·ªØ li·ªáu (t∆∞∆°ng ·ª©ng v·ªõi c√°c thu·ªôc t√≠nh c·ªßa class Flight):
//     |   - flightCode: "VN123"
//     |   - aircraftType: "Boeing 787"
//     |   - departureCode: "HAN"
//     |   - arrivalCode: "SGN"
//     |   - departureTime: Timestamp (ki·ªÉu c·ªßa Firestore)
//     |   - arrivalTime: Timestamp (ki·ªÉu c·ªßa Firestore)
//     |   - departureCity: "H√† N·ªôi"
//     |   - arrivalCity: "H·ªì Ch√≠ Minh"
//     |   - status: "OnTime"
//     |
//     |-- Sub-collection: seats
//         |
//         |-- Document (seatCode - v√≠ d·ª•: A1)
//             |
//             |-- Tr∆∞·ªùng d·ªØ li·ªáu (t∆∞∆°ng ·ª©ng v·ªõi c√°c thu·ªôc t√≠nh c·ªßa class SeatStatus):
//             |   - row: 1
//             |   - col: "A"
//             |   - typeCode: "business-classic"
//             |   - isAvailable: true
//             |   - isLocked: false
//             |   - lockedBy: null
//             |   - lockExpiresAt: Timestamp (ki·ªÉu c·ªßa Firestore)
//             |   - lockedAt: Timestamp (ki·ªÉu c·ªßa Firestore)
//             |   - soldTo: null
//             |   - soldAt: Timestamp (ki·ªÉu c·ªßa Firestore)

// Collection: seat_types
// |
// |-- Document (typeCode - v√≠ d·ª•: business-classic)
//     |
//     |-- Tr∆∞·ªùng d·ªØ li·ªáu (t∆∞∆°ng ·ª©ng v·ªõi c√°c thu·ªôc t√≠nh c·ªßa class SeatType):
//     |   - seatName: "Th∆∞∆°ng gia c·ªï ƒëi·ªÉn"
//     |   - price: 1500000
//     |   - changeFee: 200000
//     |   - refundFee: 500000
//     |   - checkedBaggage: 30
//     |   - carryOn: 10
//     |   - service: ["∆Øu ti√™n check-in", "ƒê·ªì u·ªëng mi·ªÖn ph√≠"]
function dbGenerateInitialSeats(flightId, rows, cols, seatTypes, startRowBus, startRowEco, standardPrice) {
    const seats = []
    const arrCols = []

    if (typeof cols === 'number' && cols > 0) {
        for (let i = 0; i < cols; i++) {
            arrCols.push(String.fromCharCode(65 + i));
        }
    } else {
        console.error("cols kh√¥ng ph·∫£i l√† m·ªôt s·ªë h·ª£p l·ªá:", cols);
        return []
    }


    for (let i = 1; i <= rows; i++) {
        for (const col of arrCols) {
            const seatCode = `${col}${i}`
            let seatObject
            if (i >= startRowBus && i < startRowEco) {
                const typeCode = seatTypes.find((seatType) => seatType === 'Business')
                seatObject = {
                    flightId: flightId,
                    seatCode: seatCode,
                    row: i,
                    col: col,
                    typeCode: typeCode,
                    standardPrice: standardPrice
                }
                seats.push(seatObject)
            } else {
                const typeCode = seatTypes.find((seatType) => seatType === 'Economy')
                seatObject = {
                    flightId: flightId,
                    seatCode: seatCode,
                    row: i,
                    col: col,
                    typeCode: typeCode,
                    standardPrice: standardPrice
                }
                seats.push(seatObject)
            }
        }
    }
    return seats
}

export const dbCreateFlight = async (flightData, rows, cols, seatTypes, startRowBus, startRowEco, standardPrice) => {
    try {
        const flightDocRef = db.collection('flights').doc(flightData.flightId)

        const flightObject = new Flight(flightData).toObject()
        await flightDocRef.set(flightObject)

        // create seats
        const initialSeatsMap = dbGenerateInitialSeats(flightData.flightId, rows, cols, seatTypes, startRowBus, startRowEco, standardPrice)

        // S·ª≠ d·ª•ng batch ƒë·ªÉ ƒë·∫£m b·∫£o to√†n b·ªô c√°c thao t√°c ghi trong batch s·∫Ω th√†nh c√¥ng ho·∫∑c th·∫•t b·∫°i c√πng nhau 
        // N·∫øu c√≥ l·ªói x·∫£y ra khi ghi m·ªôt t√†i li·ªáu, kh√¥ng c√≥ t√†i li·ªáu n√†o b·ªã ghi v√†o Firestore
        const seatsBatch = db.batch()
        const seatCollectionRef = flightDocRef.collection('seats')
        for (const seat of initialSeatsMap) {
            const seatDocRef = seatCollectionRef.doc(seat.seatCode)
            const seatStatusObject = new SeatStatus(seat).toObject()
            seatsBatch.set(seatDocRef, seatStatusObject)
        }

        await seatsBatch.commit()
        console.log(`ƒê√£ t·∫°o chuy·∫øn bay th√†nh c√¥ng v·ªõi ID: ${flightData.flightId}`)
        return true

    } catch (error) {
        console.error('Error creating flight:', error)
        return false
    }
}

export const dbGetFlights = async (flightId) => {
    try {
        const flightDocRef = db.collection('flights').doc(flightId)
        const flightSnap = await flightDocRef.get()
        if (flightSnap.exists) {
            return flightSnap.data()
        } else {
            console.log(` Kh√¥ng t√¨m th·∫•y chuy·∫øn bay v·ªõi ID: ${flightId}`)
            return null
        }
    } catch (error) {
        console.error("L·ªói khi l·∫•y th√¥ng tin chuy·∫øn bay:", error)
        return null
    }
}

// get all seats
export const dbGetFlightSeats = async (flightId) => {
    try {
        const seatsCollectionRef = db.collection('flights').doc(flightId).collection('seats')
        const seatsSnap = await seatsCollectionRef.get()
        const seatsData = []
        seatsSnap.forEach(doc => {
            seatsData.push(new SeatStatus(doc.data()))
        })

        return seatsData
    } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch gh·∫ø c·ªßa chuy·∫øn bay:", error)
        return []
    }
}

export const dbCreateTypeSeats = async (seatTypeData) => {
    try {
        const seatTypeDocRef = db.collection('seatTypes').doc(seatTypeData.typeCode)
        const seatTypeObject = new SeatType(seatTypeData).toObject()
        await seatTypeDocRef.set(seatTypeObject)
        return true
    } catch (error) {
        console.log("L·ªói khi t·∫°o lo·∫°i gh·∫ø: ", error)
        return false
    }
}



// l·∫•y th√¥ng tin lo·∫°i gh·∫ø
export const dbGetTypeSeat = async (typeCode) => {
    try {
        const seatTypeDocRef = db.collection('seatTypes').doc(typeCode)
        const seatTypeSnap = await seatTypeDocRef.get()
        if (seatTypeSnap.exists) {
            return new SeatType(seatTypeSnap.data())
        } else {
            console.log(`Kh√¥ng t√¨m th·∫•y lo·∫°i gh·∫ø v·ªõi m√£: ${typeCode}`);
            return null
        }
    } catch (error) {
        console.error(`L·ªói khi l·∫•y th√¥ng tin lo·∫°i gh·∫ø ${typeCode}:`, error);
        return null
    }
}

export const dbGetAllTypeSeats = async () => {
    try {
        const seatTypeDocRef = db.collection('seatTypes')
        const seatTypesSnapshot = await seatTypeDocRef.get()
        const seatTypes = seatTypesSnapshot.docs.map(doc => new SeatType(doc.data()).toObject())
        return seatTypes
    } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch lo·∫°i gh·∫ø c·ªßa chuy·∫øn bay:", error)
        return []
    }
}

// lock seat
export async function dbLockSeat(flightId, seatCode, userId, durationMs) {
    try {
        const seatDocRef = db.collection('flights').doc(flightId).collection('seats').doc(seatCode)

        // Transaction s·∫Ω:
        //     Kh√≥a t·∫°m th·ªùi document ƒë√≥
        //     ƒê·∫£m b·∫£o d·ªØ li·ªáu ch∆∞a b·ªã ƒë·ªïi gi·ªØa l√∫c b·∫°n ƒë·ªçc v√† l√∫c b·∫°n ghi
        //     N·∫øu ai ƒë√≥ s·ª≠a document n√†y trong l√∫c b·∫°n ch∆∞a ghi ‚Üí transaction s·∫Ω b·ªã h·ªßy v√† ch·∫°y l·∫°i
        //     N·∫øu v·∫´n b·ªã l·ªói th√¨ s·∫Ω b√°o l·ªói cho b·∫°n
        // Gi·∫£ s·ª≠ 2 ng∆∞·ªùi A v√† B c√πng mu·ªën ƒë·∫∑t gh·∫ø A1:
        //     üîπ V·ªõi Transaction:
        //     A v√† B c√πng ch·∫°y transaction.get(seatDocRef) ƒë·ªÉ ƒë·ªçc gh·∫ø A1.
        //     N·∫øu A ghi ƒë∆∞·ª£c tr∆∞·ªõc ‚Üí B khi ghi s·∫Ω th·∫•y ‚Äúd·ªØ li·ªáu ƒë√£ thay ƒë·ªïi‚Äù ‚Üí transaction c·ªßa B b·ªã h·ªßy v√† ch·∫°y l·∫°i ho·∫∑c b√°o l·ªói.
        //     Nh·ªù v·∫≠y, ch·ªâ 1 ng∆∞·ªùi ƒë·∫∑t ƒë∆∞·ª£c
        await db.runTransaction(async (transaction) => {
            const seatDoc = await transaction.get(seatDocRef)
            if (!seatDoc.exists) {
                throw "Gh·∫ø kh√¥ng t·ªìn t·∫°i"
            }
            const seatData = seatDoc.data()
            if (!seatData.isAvailable || seatData.isLocked) {
                throw "Gh·∫ø kh√¥ng c√≤n tr·ªëng ho·∫∑c ƒëang b·ªã kh√≥a"
            }

            transaction.update(seatDocRef, {
                isLocked: true,
                lockedBy: userId,
                lockedAt: admin.firestore.Timestamp.now(),
                lockExpiresAt: admin.firestore.Timestamp.fromMillis(Date.now() + durationMs),
            })

            console.log(`Gh·∫ø ${seatCode} ƒë√£ ƒë∆∞·ª£c kh√≥a t·∫°m th·ªùi cho ng∆∞·ªùi d√πng ${userId} tr√™n chuy·∫øn bay ${flightId}.`)
        })

        return true
    } catch (error) {
        console.error(`L·ªói khi kh√≥a gh·∫ø ${seatCode} tr√™n chuy·∫øn bay ${flightId}:`, error)
        return false
    }
}

export const dbUnlockExpireSeat = async (flightId) => {
    try {
        const seatCollectionRef = db.collection('flights').doc(flightId).collection('seats')
        const now = admin.firestore.Timestamp.now()
        const querySnapshot = await seatCollectionRef
            .where('isLocked', '==', true)
            .where('lockExpiresAt', '<', now)
            .get()

        const bacth = db.batch()
        querySnapshot.forEach(doc => {
            bacth.update(doc.ref, {
                isLocked: false,
                lockedBy: null,
                lockedAt: null,
                lockExpiresAt: null,
            })
        })

        await bacth.commit()
        console.log(`ƒê√£ m·ªü kh√≥a ${querySnapshot.size} gh·∫ø h·∫øt th·ªùi gian ch·ªù tr√™n chuy·∫øn bay ${flightId}`)
        return true

    } catch (error) {
        console.error(`L·ªói khi m·ªü kh√≥a gh·∫ø h·∫øt h·∫°n tr√™n chuy·∫øn bay ${flightId}:`, error)
        return false
    }
}

export const dbUnlockSeat = async (flightId, seatCode, userId) => {
    try {
        const seatDocRef = db.collection('flights').doc(flightId).collection('seats').doc(seatCode)
        await db.runTransaction(async (transaction) => {
            const seatDoc = await transaction.get(seatDocRef)
            if (!seatDoc.exists) {
                throw "Gh·∫ø kh√¥ng t·ªìn t·∫°i"
            }
            const seatData = seatDoc.data()
            if (!seatData.isLocked) {
                throw "Gh·∫ø kh√¥ng b·ªã kh√≥a"
            }

            if (seatData.lockedBy !== userId) {
                throw new Error("B·∫°n kh√¥ng c√≥ quy·ªÅn m·ªü kh√≥a gh·∫ø n√†y")
            }

            transaction.update(seatDocRef, {
                isLocked: false,
                lockedBy: null,
                lockedAt: null,
                lockExpiresAt: null
            })
        })
        
        console.log(`Gh·∫ø ${seatCode} ƒë√£ ƒë∆∞·ª£c m·ªü kh√≥a b·ªüi ng∆∞·ªùi d√πng ${userId} tr√™n chuy·∫øn bay ${flightId}.`)

        return true
    } catch (error) {
        console.error(`L·ªói khi m·ªü kh√≥a gh·∫ø ${seatCode} tr√™n chuy·∫øn bay ${flightId}:`, error)
        return false
    }
}


export const dbPurchaseSeat = async (userId, flightId, seatCode) => {
    try {
        const seatDocRef = db.collection('flights').doc(flightId).collection('seats').doc(seatCode)
        await db.runTransaction(async (transaction) => {
            const seatDoc = await transaction.get(seatDocRef)
            if (!seatDoc.exists) {
                throw "Gh·∫ø kh√¥ng t·ªìn t·∫°i"
            }
            const seatData = seatDoc.data()
            if (!seatData.isAvailable || seatData.isLocked || seatData.soldTo) {
                throw "Gh·∫ø kh√¥ng c√≤n tr·ªëng, ƒëang b·ªã kh√≥a ho·∫∑c ƒë√£ ƒë∆∞·ª£c mua"
            }

            transaction.update(seatDocRef, {
                isAvailable: false,
                isLocked: false,
                lockedBy: null,
                lockExpiresAt: null,
                soldTo: userId,
                soldAt: admin.firestore.Timestamp.now()
            })
        })

        console.log(`Gh·∫ø ${seatCode} ƒë√£ ƒë∆∞·ª£c mua th√†nh c√¥ng tr√™n chuy·∫øn bay ${flightId} b·ªüi ng∆∞·ªùi d√πng ${userId}`)
        return true
    } catch (error) {
        console.error(`L·ªói khi mua gh·∫ø ${seatCode} tr√™n chuy·∫øn bay ${flightId}:`, error)
        return false
    }
}